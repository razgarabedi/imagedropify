// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String        @id @default(uuid())
  email                   String        @unique
  password                String
  role                    UserRole      @default(User)
  status                  UserStatus    @default(Pending)
  maxImages               Int?
  maxSingleUploadSizeMB   Float?
  maxTotalStorageMB       Float?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  folderShares            FolderShare[]
  images                  Image[] // Relation to Image model
}

model Image {
  id             String   @id @default(uuid())
  filename       String // Actual filename on disk, e.g., uniqueId-sanitizedName.ext
  originalName   String // Original name from user's computer
  urlPath        String // Path relative to UPLOAD_DIR_BASE_PUBLIC, e.g., userId/folderName/YYYY/MM/DD/filename.ext
  mimeType       String
  size           Int // File size in bytes
  folderName     String
  uploadedAt     DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, folderName, uploadedAt])
}

model SiteSetting {
  id                    Int      @id @default(1)
  maxUploadSizeMB       Int      @default(6)
  homepageImageUrl      String?
  registrationsEnabled  Boolean  @default(true)
  updatedAt             DateTime @updatedAt
}

model FolderShare {
  shareId    String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderName String
  createdAt  DateTime @default(now())

  @@unique([userId, folderName]) // A user can only share a specific folder once
  @@index([userId])
}

enum UserRole {
  User
  Admin
}

enum UserStatus {
  Pending
  Approved
  Rejected
}
